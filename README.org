* sap

Super Automous Printer

an api for [[https://learn.adafruit.com/pi-thermal-printer/][adafruit's IoT printer]].

* Setting up the printer
** Raspberry Pi setup

Let's assume you've already assembled the printer physically, and configured it to be accesisble wirelessly over SSH.

Now, we'll ssh into our server and follow the setup instructions, heavily inspired by [[https://learn.adafruit.com/pi-thermal-printer/pi-setup-part-2][the adafruit tutorial]], but including a few additions to make the api server run.

#+BEGIN_SRC shell 
#!/bin/bash

# install requisite software
curl -sLS https://apt.adafruit.com/add | sudo bash # add adafruit repos
sudo apt-get update
sudo apt-get install python-serial python-imaging python-unidecode # install python+recs
sudo apt-get install node # install node

# install thermal printer code
sudo apt-get install git
git clone https://github.com/elsehow/sap
cd sap
npm install
#+END_SRC

Now, =sudo vi /boot/cmdline.txt= and change the contents to:

#+BEGIN_SRC bash
dwc_otg.lpm_enable=0 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait
#+END_SRC

Now, =sudo vi /etc/inittab= and comment out the last line. After you're done, the last line should read:

#+BEGIN_SRC bash
# T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100
#+END_SRC

You should be able to print now:

#+BEGIN_SRC shell
sudo python printertest.py
#+END_SRC

Hooray!

** Server setup

Now, write a file called =config.js= to store your secret API key.

#+BEGIN_SRC js 
module.exports = 'my-secret-key'
#+END_SRC

Make sure your API key is unguessable. Anyone who has it will be able to print stuff over your printer!

Now, simply =npm start= to start the server as a daemon using [[http://npmjs.com/package/forever][forever]].

#+BEGIN_SRC shell
npm start
#+END_SRC

(If you ever want to stop your server, just do =npm run stop=).

* Using the API
** Printing stuff with POST requests of JSON

We can use our API by sending JSON-formatted POST requests to indra.webfactional.com/

JSON requests should look like this:

#+BEGIN_SRC js 
var payload = {
  type: 'my-secret-printer-key',
  message: 'hello my furry, lovely\nfriends'
}
#+END_SRC

where =type= refers to the secret key of the printer. (you set this key in a file called =config.js=, on your printer).

notice how we can put linebreaks in messages using the =\n= newline symbol.

** Example client

Here is a simple example client, in =example-client/client.js=.

It will take strings to print via the command line

To install it

#+BEGIN_SRC shell
cd example-client
npm install
#+END_SRC

And to use it, just

#+BEGIN_SRC shell
node client.js "my coooool message"
#+END_SRC

* Code / Implementation

The API consists of two files, both written below: =printer-daemon.py= and =server.js=.

=printer-daemon.py= takes a string as a command line argument, and prints this string on the printer.

=server.js= subscribes to an [[https://github.com/berkeley-biosense/indra-server][indra server]] instance. It receives messages by subscribing to events that have a secret API key in the =type= field of the JSON posted to the indra server.

to develop, edit the code below, and [[http://orgmode.org/manual/Extracting-source-code.html][use emacs to tangle the file]].

** printer-daemon.py

Here's a script that accepts a string over command line argument.

For example, 

#+BEGIN_SRC shell
python printer-daemon.py "hello"
#+END_SRC

We'll call this script =printer-daemon.py=.

#+BEGIN_SRC python :tangle printer-daemon.py
#!/usr/bin/python

from Adafruit_Thermal import *
import sys
printer = Adafruit_Thermal("/dev/ttyAMA0", 19200, timeout=5)

# print whatever came over argv[1]
printer.println(sys.argv[1])

# print some blank lines for clean tearing
printer.println("")
printer.println("")
printer.println("")
#+END_SRC

Now let's make this script executable with

#+BEGIN_SRC shell

chmod +x printer-daemon.py

#+END_SRC

** server.js

Finally, we'll make a script server.js.

It will connect to indra.webfactional.com (or any other hostname running an [[https://github.com/berkeley-biosense/indra-server][indra server]] instance).

*** package.json

First let's setup its =package.json=

#+BEGIN_SRC json :tangle package.json
{
  "name": "printer-server",
  "version": "1.0.0",
  "description": "a server for adafruit printer",
  "main": "server.js",
  "scripts": {
    "start": "forever start -a -l server.log -o out.log -e err.log server.js",
    "stop": "forever stopall"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/elsehow/sap/"
  },
  "keywords": [
    "iot"
  ],
  "author": "elsehow",
  "license": "MIT",
  "dependencies": {
    "socket.io-client": "^1.4.5"
  },
  "devDependencies": {
    "forever": "^0.15.1"
  }
}
#+END_SRC

now 

#+BEGIN_SRC shell
npm install
#+END_SRC

to load those dependencies.
*** server.js
#+BEGIN_SRC js :tangle server.js

var socket = require('socket.io-client')('http://indra.webfactional.com')
  , exec = require('child_process').exec
  , key = require('config.js')

// format a string for passing over command line
// by adding quotes to it
function format (str) {
  return "\"" + str + "\""
}


// setup listener
function listen () {
  socket.on(key, function (msg) {
    console.log('heard', msg)
    exec('python printer-daemon.py ' + format(msg.message), function (err, _) {
      if (err) console.log('error printing!!', err)
    })
  })
}

socket.on('connect', function () {
  listen()
  console.log('connected to indra, listening on key', key)
})

#+END_SRC

** example-client/client.js 
*** 
#+BEGIN_SRC js :tangle example-client/client.js
var argv = process.argv.slice(2)
  , key = require('../config.js')

var payload = { 
  type: key,
  message: argv[0]
  //message: 'hello my furry, lovely friends'
}

var request = require('request-json')
var client = request.createClient('http://indra.webfactional.com')


client.post('/', payload, function(err, res, body) {
  console.log('posted')
})
#+END_SRC

**** =example-client/package.json=

#+BEGIN_SRC :tangle example-client/package.json

{
  "dependencies": {
    "request-json": "^0.5.5"
  }
}

#+END_SRC

* TODO todos / improvements
** TODO configure server to start on boot

Now let's get the server to start up

Edit  =/etc/rc.local=, and add these two lines at the end, before the =exit 0= line.

#+BEGIN_SRC shell
cd /home/pi/sap
npm start
#+END_SRC
** TODO change my secret key on the server
** TODO python script can run continuously as child process

A python script could connect to the printer, and run contiuously, printing whenever a line is fed over stdin:

#+BEGIN_SRC python
from Adafruit_Thermal import *
import sys
printer = Adafruit_Thermal("/dev/ttyAMA0", 19200, timeout=5)

for line in sys.stdin:
  printer.println(line)
#+END_SRC

Then, we can launch this script as the child process of our node server:

#+BEGIN_SRC js
var proc = spawn('./printer-daemon.py')
socket.on('msg', (msg) => proc.stdin.write(format(msg.message)))
#+END_SRC
** TODO format printer output (+images!!)
There are a world of (unexplored) possibilities with regards to what the printer API can handle.
*** TODO have a look and see what printer API exposes
*** TODO dream on a DSL for describing this?
**** TODO parse markdown to make this work?
***** how do python markdown parsers work?
****** are they represented in a way that makes it easy to call api methods on them?
****** failing that, how do js parsers work?
******* then we would have to transfer to python script
******* so lets avoid this if possible
